version: 2

node-image: &node-image
  image: circleci/node:10

set-npm-global: &set-npm-global
  run:
    name: set-npm-global
    command: |
      mkdir -p ~/.npm-global
      npm config set prefix '~/.npm-global'
      echo 'export NPM_CONFIG_PREFIX=~/.npm-global' >> $BASH_ENV
      echo 'export PATH=~/.npm-global/bin:$PATH' >> $BASH_ENV
      source $BASH_ENV

save: &save
  save_cache:
    key: code-{{ .Revision }}
    paths:
      - .
      - "~/.npm-global"

restore: &restore
  restore_cache:
    key: code-{{ .Revision }}

db-wait: &db-wait
  run:
    name: Wait for DB
    command: dockerize -wait tcp://127.0.0.1:5432 -timeout 120s

test-db: &test-db
  run:
    name: test
    command: npm run migrate up -- -m test/migrations && npm run migrate down 0 -- -m test/migrations --timestamps

jobs:
  install:
    docker:
      - <<: *node-image
    steps:
      - checkout
      - <<: *set-npm-global
      - run: npm install -g npm@6.4.1
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run: npm i
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      - <<: *save
  lint:
    docker:
      - <<: *node-image
    steps:
      - <<: *restore
      - run: npm run lint
  test:
    docker:
      - <<: *node-image
    steps:
      - <<: *restore
      - run: npm test
  test-pg-9:
    docker:
      - <<: *node-image
        environment:
          - DATABASE_URL=postgres://ubuntu@localhost:5432/circle_test
      - image: postgres:9.6-alpine
        environment:
          - POSTGRES_USER=ubuntu
          - POSTGRES_DB=circle_test
    steps:
      - <<: *restore
      - <<: *db-wait
      - <<: *test-db
  test-pg-10:
    docker:
      - <<: *node-image
        environment:
          - DATABASE_URL=postgres://ubuntu@localhost:5432/circle_test
      - image: postgres:10.8-alpine
        environment:
          - POSTGRES_USER=ubuntu
          - POSTGRES_DB=circle_test
    steps:
      - <<: *restore
      - <<: *db-wait
      - <<: *test-db
  test-pg-11:
    docker:
      - <<: *node-image
        environment:
          - DATABASE_URL=postgres://ubuntu@localhost:5432/circle_test
      - image: postgres:11.3-alpine
        environment:
          - POSTGRES_USER=ubuntu
          - POSTGRES_DB=circle_test
    steps:
      - <<: *restore
      - <<: *db-wait
      - <<: *test-db
  test-cockroach-1:
    docker:
      - <<: *node-image
        environment:
          - DATABASE_URL=postgresql://root@localhost:26257/circle_test
      - image: cockroachdb/cockroach:v1.1.9
        command: ['start', '--insecure', '--host=localhost']
    steps:
      - <<: *restore
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://127.0.0.1:26257 -timeout 120s
      - run:
          name: create-cockroach-db
          command: |
            node -e '
              (new require("pg").Pool({ connectionString: process.env.DATABASE_URL }))
                .query(
                  "CREATE DATABASE circle_test",
                  err => (process.exitCode = err ? 1 : 0) && process.stdout.write(err.stack)
                )
            '
      - run:
          name: test
          command: npm run migrate up -- -m test/cockroach -s '' --migrations-schema circle_test --no-lock && npm run migrate down 0 -- -m test/cockroach -s '' --migrations-schema circle_test --no-lock --timestamps
  test-cockroach-2:
    docker:
      - <<: *node-image
        environment:
          - DATABASE_URL=postgresql://root@localhost:26257/circle_test
      - image: cockroachdb/cockroach:v2.1.7
        command: ['start', '--insecure', '--host=localhost']
    steps:
      - <<: *restore
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://127.0.0.1:26257 -timeout 120s
      - run:
          name: create-cockroach-db
          command: |
            node -e '
              (new require("pg").Pool({ connectionString: process.env.DATABASE_URL }))
                .query(
                  "CREATE DATABASE circle_test",
                  err => (process.exitCode = err ? 1 : 0) && process.stdout.write(err.stack)
                )
            '
      - run:
          name: test
          command: npm run migrate up -- -m test/cockroach --no-lock && npm run migrate down 0 -- -m test/cockroach --no-lock --timestamps
  test-node-6:
    docker:
      - image: circleci/node:6
        environment:
          - DATABASE_URL=postgres://ubuntu@localhost:5432/circle_test
      - image: postgres:10.8-alpine
        environment:
          - POSTGRES_USER=ubuntu
          - POSTGRES_DB=circle_test
    steps:
      - <<: *restore
      - <<: *db-wait
      - <<: *test-db
  test-node-8:
    docker:
      - image: circleci/node:8
        environment:
          - DATABASE_URL=postgres://ubuntu@localhost:5432/circle_test
      - image: postgres:10.8-alpine
        environment:
          - POSTGRES_USER=ubuntu
          - POSTGRES_DB=circle_test
    steps:
      - <<: *restore
      - <<: *db-wait
      - <<: *test-db
  test-node-12:
    docker:
      - image: circleci/node:12
        environment:
          - DATABASE_URL=postgres://ubuntu@localhost:5432/circle_test
      - image: postgres:10.8-alpine
        environment:
          - POSTGRES_USER=ubuntu
          - POSTGRES_DB=circle_test
    steps:
      - <<: *restore
      - <<: *db-wait
      - <<: *test-db
  test-config:
    docker:
      - <<: *node-image
      - image: postgres:10.8-alpine
        environment:
          - POSTGRES_USER=ubuntu
          - POSTGRES_DB=circle_test
    steps:
      - <<: *restore
      - run:
          name: create-config
          command: |
            mkdir -p config
            cat > config/default.json << 'EOF'
            {
              "db": {
                "user": "ubuntu",
                "host": "localhost",
                "port": "5432",
                "database": "circle_test"
              }
            }
            EOF
      - <<: *db-wait
      - <<: *test-db
  test-password:
    docker:
      - <<: *node-image
      - image: postgres:10.8-alpine
        environment:
          - POSTGRES_USER=ubuntu
          - POSTGRES_PASSWORD=@#$%123456abcdefghABCDEFGH{}[]\(\)/\`~,\;:.\<\>\"
          - POSTGRES_DB=circle_test
    steps:
      - <<: *restore
      - run:
          name: create-config
          command: |
            mkdir -p config
            cat > config/default.json << 'EOF'
            {
              "db": {
                "user": "ubuntu",
                "password": "@#$%123456abcdefghABCDEFGH{}[]()/`~,;:.<>\"",
                "host": "localhost",
                "port": "5432",
                "database": "circle_test"
              }
            }
            EOF
      - <<: *db-wait
      - <<: *test-db
  test-env-vars:
    docker:
    - <<: *node-image
      environment:
        - PGUSER=ubuntu
        - PGPASSWORD=ubuntu-pass
        - PGDATABASE=circle_test
    - image: postgres:10.8-alpine
      environment:
        - POSTGRES_USER=ubuntu
        - POSTGRES_PASSWORD=ubuntu-pass
        - POSTGRES_DB=circle_test
    steps:
      - <<: *restore
      - <<: *db-wait
      - <<: *test-db

workflows:
  version: 2
  main_workflow:
    jobs:
      - install
      - lint:
          requires:
            - install
      - test:
          requires:
            - install
      - test-pg-9:
          requires:
            - install
      - test-pg-10:
          requires:
            - install
      - test-pg-11:
          requires:
            - install
      - test-cockroach-1:
          requires:
            - install
      - test-cockroach-2:
          requires:
            - install
      - test-node-6:
          requires:
            - install
      - test-node-8:
          requires:
            - install
      - test-node-12:
          requires:
            - install
      - test-config:
          requires:
            - install
      - test-password:
          requires:
            - install
      - test-env-vars:
          requires:
          - install
