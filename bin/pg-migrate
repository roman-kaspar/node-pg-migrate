#!/usr/bin/env node

require('dotenv').load({ silent: true });
if (!process.env.DATABASE_URL) {
  console.error('The $DATABASE_URL environment variable is not set.');
  process.exit(1);
}

var util = require('util');
var optimist = require('optimist');
var Migration = require('../lib/migration');
var MigrationRunner = require('../lib/runner');

process.on('uncaughtException', function(err) {
  console.log(err.stack);
  process.exit(1);
});

var argv = optimist
  .default({
    'verbose': false,
    'force-exit': false,
    'migrations-dir': process.cwd() + '/migrations',
    'migrations-schema': 'public',
    'migrations-table': 'pgmigrations',
    'database-url-var': 'DATABASE_URL',
  })
  .usage('Usage: db-migrate [up|down|create] migrationName [options]')

  .describe('database-url-var', 'Name of env variable where is set the database_url (default = `DATABASE_URL`).')
  .alias('d', 'database-url-var')
  .string('d')

  .describe('migrations-dir', 'The directory containing your migration files (default = `migrations`).')
  .alias('m', 'migrations-dir')
  .string('m')

  .describe('migrations-table', 'The table storing which migrations have been run (default = `pgmigrations`)')
  .alias('t', 'migrations-table')
  .string('t')

  .describe('migrations-schema', 'The schema storing table which migrations have been run (default = `public`)')
  .alias('s', 'migrations-schema')
  .string('s')

  .describe('dry-run', 'Prints the SQL but doesn\'t run it.')
  .boolean('dry-run')

  .describe('check-order', 'Check order of migrations before running them.')
  .boolean('check-order')

  .describe('verbose', 'Verbose mode.')
  .alias('v', 'verbose')
  .boolean('v')

  .alias('h', 'help')
  .alias('h', '?')
  .boolean('h')

  .describe('version', 'Print version info.')
  .alias('i', 'version')
  .boolean('version')

  .argv;

if (argv.version) {
  console.log(module.exports.version);
  process.exit(0);
}

if (argv.help || argv._.length === 0) {
  optimist.showHelp();
  process.exit(1);
}

global.verbose = argv.verbose;
global.dryRun = argv['dry-run'];
if (global.dryRun) {
  console.log('dry run');
}


var MIGRATIONS_DIR = argv['migrations-dir'];
var DATABASE_URL = process.env[argv['database-url-var']];
var MIGRATIONS_SCHEMA = argv['migrations-schema'];
var MIGRATIONS_TABLE = argv['migrations-table'];

var action = argv._.shift();

if (action === 'create') {
  // replaces spaces with dashes - should help fix some errors
  var new_migration_name = argv._.length ? argv._.join('-') : '';
  // forces use of dashes in names - keep thing clean
  new_migration_name = new_migration_name.replace(/_ /g, '-');

  if (!new_migration_name) {
    console.log('\'migrationName\' is required.');
    optimist.showHelp();
    process.exit(1);
  }

  var migration = Migration.create(new_migration_name, MIGRATIONS_DIR);
  console.log(util.format('Created migration -- %s', migration.path));
} else if (action === 'up' || action === 'down') {
  var updown_arg = argv._.length ? argv._.shift() : null;
  var num_migrations;
  var migration_name;

  if (updown_arg !== null) {
    if (parseInt(updown_arg) == updown_arg) { // eslint-disable-line eqeqeq
      num_migrations = parseInt(updown_arg);
    } else {
      migration_name = argv._.join('-').replace(/_ /g, '-');
    }
  }

  var runner = new MigrationRunner({
    database_url: DATABASE_URL,
    dir: MIGRATIONS_DIR,
    migrations_schema: MIGRATIONS_SCHEMA,
    migrations_table: MIGRATIONS_TABLE,
    direction: action,
    count: num_migrations,
    file: migration_name,
    checkOrder: argv['check-order'],
  });

  runner.run(function(err) {
    // finish -- show some logging about what happened?
    if (err) {
      console.log(err.stack);
      process.exit(1);
    }
    console.log('Migrations complete!');
    process.exit(0);
  });
} else {
  console.log('Invalid Action: Must be [up|down|create].');
  optimist.showHelp();
  process.exit(1);
}

if (argv['force-exit']) {
  console.log('Forcing exit');
  process.exit(0);
}
