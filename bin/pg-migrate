#!/usr/bin/env node

const util = require('util');
const yargs = require('yargs');
const Migration = require('../dist/migration').default; // eslint-disable-line import/no-unresolved,import/extensions
const migrationRunner = require('../dist/runner').default; // eslint-disable-line import/no-unresolved,import/extensions

require('dotenv').load({ silent: true });

process.on('uncaughtException', (err) => {
  console.log(err.stack);
  process.exit(1);
});

const argv = yargs
  .usage('Usage: db-migrate [up|down|create] migrationName [options]')

  .option('d', {
    alias: 'database-url-var',
    default: 'DATABASE_URL',
    describe: 'Name of env variable where is set the database_url',
    type: 'string',
  })

  .option('m', {
    alias: 'migrations-dir',
    default: `${process.cwd()}/migrations`,
    defaultDescription: 'migrations',
    describe: 'The directory containing your migration files',
    type: 'string',
  })

  .option('t', {
    alias: 'migrations-table',
    default: 'pgmigrations',
    describe: 'The table storing which migrations have been run',
    type: 'string',
  })

  .option('s', {
    alias: 'migrations-schema',
    default: 'public',
    describe: 'The schema storing table which migrations have been run',
    type: 'string',
  })

  .option('dry-run', {
    default: false,
    describe: 'Prints the SQL but doesn\'t run it',
    type: 'boolean',
  })

  .option('check-order', {
    default: false,
    describe: 'Check order of migrations before running them',
    type: 'boolean',
  })

  .option('i', {
    alias: 'version',
    default: false,
    describe: 'Print version info',
    type: 'boolean',
  })

  .help()
  .argv;

if (argv.version) {
  console.log(module.exports.version);
  process.exit(0);
}

if (argv.help || argv._.length === 0) {
  yargs.showHelp();
  process.exit(1);
}

const MIGRATIONS_DIR = argv['migrations-dir'];
const DATABASE_URL = process.env[argv['database-url-var']];
const MIGRATIONS_SCHEMA = argv['migrations-schema'];
const MIGRATIONS_TABLE = argv['migrations-table'];
const DRY_RUN = argv['dry-run'];

if (!DATABASE_URL) {
  console.error(`The $${argv['database-url-var']} environment variable is not set.`);
  process.exit(1);
}

if (DRY_RUN) {
  console.log('dry run');
}

const action = argv._.shift();

if (action === 'create') {
  // replaces spaces with dashes - should help fix some errors
  let new_migration_name = argv._.length ? argv._.join('-') : '';
  // forces use of dashes in names - keep thing clean
  new_migration_name = new_migration_name.replace(/_ /g, '-');

  if (!new_migration_name) {
    console.log('\'migrationName\' is required.');
    yargs.showHelp();
    process.exit(1);
  }

  const migration = Migration.create(new_migration_name, MIGRATIONS_DIR);
  console.log(util.format('Created migration -- %s', migration.path));
} else if (action === 'up' || action === 'down') {
  const updown_arg = argv._.length ? argv._.shift() : null;
  let num_migrations;
  let migration_name;

  if (updown_arg !== null) {
    if (parseInt(updown_arg, 10) == updown_arg) { // eslint-disable-line eqeqeq
      num_migrations = parseInt(updown_arg, 10);
    } else {
      migration_name = argv._.join('-').replace(/_ /g, '-');
    }
  }

  migrationRunner({
    dryRun: DRY_RUN,
    database_url: DATABASE_URL,
    dir: MIGRATIONS_DIR,
    migrations_schema: MIGRATIONS_SCHEMA,
    migrations_table: MIGRATIONS_TABLE,
    direction: action,
    count: num_migrations,
    file: migration_name,
    checkOrder: argv['check-order'],
  })
    .then(() => {
      console.log('Migrations complete!');
      process.exit(0);
    })
    .catch((err) => {
      console.log(err.stack);
      process.exit(1);
    });
} else {
  console.log('Invalid Action: Must be [up|down|create].');
  yargs.showHelp();
  process.exit(1);
}

if (argv['force-exit']) {
  console.log('Forcing exit');
  process.exit(0);
}
